// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: cms.proto

package cmsclient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CmsClient is the client API for Cms service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CmsClient interface {
	SubjectAdd(ctx context.Context, in *SubjectAddReq, opts ...grpc.CallOption) (*SubjectAddResp, error)
	SubjectDelete(ctx context.Context, in *SubjectDeleteReq, opts ...grpc.CallOption) (*SubjectDeleteResp, error)
	SubjectUpdate(ctx context.Context, in *SubjectUpdateReq, opts ...grpc.CallOption) (*SubjectUpdateResp, error)
	SubjectList(ctx context.Context, in *SubjectListReq, opts ...grpc.CallOption) (*SubjectListResp, error)
	SubjectListByIds(ctx context.Context, in *SubjectListByIdsReq, opts ...grpc.CallOption) (*SubjectListResp, error)
}

type cmsClient struct {
	cc grpc.ClientConnInterface
}

func NewCmsClient(cc grpc.ClientConnInterface) CmsClient {
	return &cmsClient{cc}
}

func (c *cmsClient) SubjectAdd(ctx context.Context, in *SubjectAddReq, opts ...grpc.CallOption) (*SubjectAddResp, error) {
	out := new(SubjectAddResp)
	err := c.cc.Invoke(ctx, "/cmsclient.Cms/SubjectAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) SubjectDelete(ctx context.Context, in *SubjectDeleteReq, opts ...grpc.CallOption) (*SubjectDeleteResp, error) {
	out := new(SubjectDeleteResp)
	err := c.cc.Invoke(ctx, "/cmsclient.Cms/SubjectDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) SubjectUpdate(ctx context.Context, in *SubjectUpdateReq, opts ...grpc.CallOption) (*SubjectUpdateResp, error) {
	out := new(SubjectUpdateResp)
	err := c.cc.Invoke(ctx, "/cmsclient.Cms/SubjectUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) SubjectList(ctx context.Context, in *SubjectListReq, opts ...grpc.CallOption) (*SubjectListResp, error) {
	out := new(SubjectListResp)
	err := c.cc.Invoke(ctx, "/cmsclient.Cms/SubjectList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) SubjectListByIds(ctx context.Context, in *SubjectListByIdsReq, opts ...grpc.CallOption) (*SubjectListResp, error) {
	out := new(SubjectListResp)
	err := c.cc.Invoke(ctx, "/cmsclient.Cms/SubjectListByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CmsServer is the server API for Cms service.
// All implementations must embed UnimplementedCmsServer
// for forward compatibility
type CmsServer interface {
	SubjectAdd(context.Context, *SubjectAddReq) (*SubjectAddResp, error)
	SubjectDelete(context.Context, *SubjectDeleteReq) (*SubjectDeleteResp, error)
	SubjectUpdate(context.Context, *SubjectUpdateReq) (*SubjectUpdateResp, error)
	SubjectList(context.Context, *SubjectListReq) (*SubjectListResp, error)
	SubjectListByIds(context.Context, *SubjectListByIdsReq) (*SubjectListResp, error)
	mustEmbedUnimplementedCmsServer()
}

// UnimplementedCmsServer must be embedded to have forward compatible implementations.
type UnimplementedCmsServer struct {
}

func (UnimplementedCmsServer) SubjectAdd(context.Context, *SubjectAddReq) (*SubjectAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectAdd not implemented")
}
func (UnimplementedCmsServer) SubjectDelete(context.Context, *SubjectDeleteReq) (*SubjectDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectDelete not implemented")
}
func (UnimplementedCmsServer) SubjectUpdate(context.Context, *SubjectUpdateReq) (*SubjectUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectUpdate not implemented")
}
func (UnimplementedCmsServer) SubjectList(context.Context, *SubjectListReq) (*SubjectListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectList not implemented")
}
func (UnimplementedCmsServer) SubjectListByIds(context.Context, *SubjectListByIdsReq) (*SubjectListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectListByIds not implemented")
}
func (UnimplementedCmsServer) mustEmbedUnimplementedCmsServer() {}

// UnsafeCmsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CmsServer will
// result in compilation errors.
type UnsafeCmsServer interface {
	mustEmbedUnimplementedCmsServer()
}

func RegisterCmsServer(s grpc.ServiceRegistrar, srv CmsServer) {
	s.RegisterService(&Cms_ServiceDesc, srv)
}

func _Cms_SubjectAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).SubjectAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmsclient.Cms/SubjectAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).SubjectAdd(ctx, req.(*SubjectAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_SubjectDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).SubjectDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmsclient.Cms/SubjectDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).SubjectDelete(ctx, req.(*SubjectDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_SubjectUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).SubjectUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmsclient.Cms/SubjectUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).SubjectUpdate(ctx, req.(*SubjectUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_SubjectList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).SubjectList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmsclient.Cms/SubjectList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).SubjectList(ctx, req.(*SubjectListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_SubjectListByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectListByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).SubjectListByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmsclient.Cms/SubjectListByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).SubjectListByIds(ctx, req.(*SubjectListByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Cms_ServiceDesc is the grpc.ServiceDesc for Cms service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cms_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cmsclient.Cms",
	HandlerType: (*CmsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubjectAdd",
			Handler:    _Cms_SubjectAdd_Handler,
		},
		{
			MethodName: "SubjectDelete",
			Handler:    _Cms_SubjectDelete_Handler,
		},
		{
			MethodName: "SubjectUpdate",
			Handler:    _Cms_SubjectUpdate_Handler,
		},
		{
			MethodName: "SubjectList",
			Handler:    _Cms_SubjectList_Handler,
		},
		{
			MethodName: "SubjectListByIds",
			Handler:    _Cms_SubjectListByIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cms.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rpc/cms/cms.proto

package cmsclient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SubjectService_SubjectAdd_FullMethodName       = "/cmsclient.SubjectService/SubjectAdd"
	SubjectService_SubjectDelete_FullMethodName    = "/cmsclient.SubjectService/SubjectDelete"
	SubjectService_SubjectUpdate_FullMethodName    = "/cmsclient.SubjectService/SubjectUpdate"
	SubjectService_SubjectList_FullMethodName      = "/cmsclient.SubjectService/SubjectList"
	SubjectService_SubjectListByIds_FullMethodName = "/cmsclient.SubjectService/SubjectListByIds"
)

// SubjectServiceClient is the client API for SubjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubjectServiceClient interface {
	// 专题
	SubjectAdd(ctx context.Context, in *SubjectAddReq, opts ...grpc.CallOption) (*SubjectAddResp, error)
	SubjectDelete(ctx context.Context, in *SubjectDeleteReq, opts ...grpc.CallOption) (*SubjectDeleteResp, error)
	SubjectUpdate(ctx context.Context, in *SubjectUpdateReq, opts ...grpc.CallOption) (*SubjectUpdateResp, error)
	SubjectList(ctx context.Context, in *SubjectListReq, opts ...grpc.CallOption) (*SubjectListResp, error)
	SubjectListByIds(ctx context.Context, in *SubjectListByIdsReq, opts ...grpc.CallOption) (*SubjectListResp, error)
}

type subjectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubjectServiceClient(cc grpc.ClientConnInterface) SubjectServiceClient {
	return &subjectServiceClient{cc}
}

func (c *subjectServiceClient) SubjectAdd(ctx context.Context, in *SubjectAddReq, opts ...grpc.CallOption) (*SubjectAddResp, error) {
	out := new(SubjectAddResp)
	err := c.cc.Invoke(ctx, SubjectService_SubjectAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectServiceClient) SubjectDelete(ctx context.Context, in *SubjectDeleteReq, opts ...grpc.CallOption) (*SubjectDeleteResp, error) {
	out := new(SubjectDeleteResp)
	err := c.cc.Invoke(ctx, SubjectService_SubjectDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectServiceClient) SubjectUpdate(ctx context.Context, in *SubjectUpdateReq, opts ...grpc.CallOption) (*SubjectUpdateResp, error) {
	out := new(SubjectUpdateResp)
	err := c.cc.Invoke(ctx, SubjectService_SubjectUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectServiceClient) SubjectList(ctx context.Context, in *SubjectListReq, opts ...grpc.CallOption) (*SubjectListResp, error) {
	out := new(SubjectListResp)
	err := c.cc.Invoke(ctx, SubjectService_SubjectList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectServiceClient) SubjectListByIds(ctx context.Context, in *SubjectListByIdsReq, opts ...grpc.CallOption) (*SubjectListResp, error) {
	out := new(SubjectListResp)
	err := c.cc.Invoke(ctx, SubjectService_SubjectListByIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubjectServiceServer is the server API for SubjectService service.
// All implementations must embed UnimplementedSubjectServiceServer
// for forward compatibility
type SubjectServiceServer interface {
	// 专题
	SubjectAdd(context.Context, *SubjectAddReq) (*SubjectAddResp, error)
	SubjectDelete(context.Context, *SubjectDeleteReq) (*SubjectDeleteResp, error)
	SubjectUpdate(context.Context, *SubjectUpdateReq) (*SubjectUpdateResp, error)
	SubjectList(context.Context, *SubjectListReq) (*SubjectListResp, error)
	SubjectListByIds(context.Context, *SubjectListByIdsReq) (*SubjectListResp, error)
	mustEmbedUnimplementedSubjectServiceServer()
}

// UnimplementedSubjectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSubjectServiceServer struct {
}

func (UnimplementedSubjectServiceServer) SubjectAdd(context.Context, *SubjectAddReq) (*SubjectAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectAdd not implemented")
}
func (UnimplementedSubjectServiceServer) SubjectDelete(context.Context, *SubjectDeleteReq) (*SubjectDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectDelete not implemented")
}
func (UnimplementedSubjectServiceServer) SubjectUpdate(context.Context, *SubjectUpdateReq) (*SubjectUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectUpdate not implemented")
}
func (UnimplementedSubjectServiceServer) SubjectList(context.Context, *SubjectListReq) (*SubjectListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectList not implemented")
}
func (UnimplementedSubjectServiceServer) SubjectListByIds(context.Context, *SubjectListByIdsReq) (*SubjectListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectListByIds not implemented")
}
func (UnimplementedSubjectServiceServer) mustEmbedUnimplementedSubjectServiceServer() {}

// UnsafeSubjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubjectServiceServer will
// result in compilation errors.
type UnsafeSubjectServiceServer interface {
	mustEmbedUnimplementedSubjectServiceServer()
}

func RegisterSubjectServiceServer(s grpc.ServiceRegistrar, srv SubjectServiceServer) {
	s.RegisterService(&SubjectService_ServiceDesc, srv)
}

func _SubjectService_SubjectAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectServiceServer).SubjectAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubjectService_SubjectAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectServiceServer).SubjectAdd(ctx, req.(*SubjectAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubjectService_SubjectDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectServiceServer).SubjectDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubjectService_SubjectDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectServiceServer).SubjectDelete(ctx, req.(*SubjectDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubjectService_SubjectUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectServiceServer).SubjectUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubjectService_SubjectUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectServiceServer).SubjectUpdate(ctx, req.(*SubjectUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubjectService_SubjectList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectServiceServer).SubjectList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubjectService_SubjectList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectServiceServer).SubjectList(ctx, req.(*SubjectListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubjectService_SubjectListByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectListByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectServiceServer).SubjectListByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubjectService_SubjectListByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectServiceServer).SubjectListByIds(ctx, req.(*SubjectListByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SubjectService_ServiceDesc is the grpc.ServiceDesc for SubjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cmsclient.SubjectService",
	HandlerType: (*SubjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubjectAdd",
			Handler:    _SubjectService_SubjectAdd_Handler,
		},
		{
			MethodName: "SubjectDelete",
			Handler:    _SubjectService_SubjectDelete_Handler,
		},
		{
			MethodName: "SubjectUpdate",
			Handler:    _SubjectService_SubjectUpdate_Handler,
		},
		{
			MethodName: "SubjectList",
			Handler:    _SubjectService_SubjectList_Handler,
		},
		{
			MethodName: "SubjectListByIds",
			Handler:    _SubjectService_SubjectListByIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/cms/cms.proto",
}

const (
	SubjectProductRelationService_SubjectProductRelationAdd_FullMethodName  = "/cmsclient.SubjectProductRelationService/SubjectProductRelationAdd"
	SubjectProductRelationService_SubjectProductRelationList_FullMethodName = "/cmsclient.SubjectProductRelationService/SubjectProductRelationList"
)

// SubjectProductRelationServiceClient is the client API for SubjectProductRelationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubjectProductRelationServiceClient interface {
	// 专题关联
	SubjectProductRelationAdd(ctx context.Context, in *SubjectProductRelationAddReq, opts ...grpc.CallOption) (*SubjectProductRelationAddResp, error)
	SubjectProductRelationList(ctx context.Context, in *SubjectProductRelationListReq, opts ...grpc.CallOption) (*SubjectProductRelationListResp, error)
}

type subjectProductRelationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubjectProductRelationServiceClient(cc grpc.ClientConnInterface) SubjectProductRelationServiceClient {
	return &subjectProductRelationServiceClient{cc}
}

func (c *subjectProductRelationServiceClient) SubjectProductRelationAdd(ctx context.Context, in *SubjectProductRelationAddReq, opts ...grpc.CallOption) (*SubjectProductRelationAddResp, error) {
	out := new(SubjectProductRelationAddResp)
	err := c.cc.Invoke(ctx, SubjectProductRelationService_SubjectProductRelationAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectProductRelationServiceClient) SubjectProductRelationList(ctx context.Context, in *SubjectProductRelationListReq, opts ...grpc.CallOption) (*SubjectProductRelationListResp, error) {
	out := new(SubjectProductRelationListResp)
	err := c.cc.Invoke(ctx, SubjectProductRelationService_SubjectProductRelationList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubjectProductRelationServiceServer is the server API for SubjectProductRelationService service.
// All implementations must embed UnimplementedSubjectProductRelationServiceServer
// for forward compatibility
type SubjectProductRelationServiceServer interface {
	// 专题关联
	SubjectProductRelationAdd(context.Context, *SubjectProductRelationAddReq) (*SubjectProductRelationAddResp, error)
	SubjectProductRelationList(context.Context, *SubjectProductRelationListReq) (*SubjectProductRelationListResp, error)
	mustEmbedUnimplementedSubjectProductRelationServiceServer()
}

// UnimplementedSubjectProductRelationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSubjectProductRelationServiceServer struct {
}

func (UnimplementedSubjectProductRelationServiceServer) SubjectProductRelationAdd(context.Context, *SubjectProductRelationAddReq) (*SubjectProductRelationAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectProductRelationAdd not implemented")
}
func (UnimplementedSubjectProductRelationServiceServer) SubjectProductRelationList(context.Context, *SubjectProductRelationListReq) (*SubjectProductRelationListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectProductRelationList not implemented")
}
func (UnimplementedSubjectProductRelationServiceServer) mustEmbedUnimplementedSubjectProductRelationServiceServer() {
}

// UnsafeSubjectProductRelationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubjectProductRelationServiceServer will
// result in compilation errors.
type UnsafeSubjectProductRelationServiceServer interface {
	mustEmbedUnimplementedSubjectProductRelationServiceServer()
}

func RegisterSubjectProductRelationServiceServer(s grpc.ServiceRegistrar, srv SubjectProductRelationServiceServer) {
	s.RegisterService(&SubjectProductRelationService_ServiceDesc, srv)
}

func _SubjectProductRelationService_SubjectProductRelationAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectProductRelationAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectProductRelationServiceServer).SubjectProductRelationAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubjectProductRelationService_SubjectProductRelationAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectProductRelationServiceServer).SubjectProductRelationAdd(ctx, req.(*SubjectProductRelationAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubjectProductRelationService_SubjectProductRelationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectProductRelationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectProductRelationServiceServer).SubjectProductRelationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubjectProductRelationService_SubjectProductRelationList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectProductRelationServiceServer).SubjectProductRelationList(ctx, req.(*SubjectProductRelationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SubjectProductRelationService_ServiceDesc is the grpc.ServiceDesc for SubjectProductRelationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubjectProductRelationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cmsclient.SubjectProductRelationService",
	HandlerType: (*SubjectProductRelationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubjectProductRelationAdd",
			Handler:    _SubjectProductRelationService_SubjectProductRelationAdd_Handler,
		},
		{
			MethodName: "SubjectProductRelationList",
			Handler:    _SubjectProductRelationService_SubjectProductRelationList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/cms/cms.proto",
}

const (
	PreferredAreaService_PreferredAreaAdd_FullMethodName    = "/cmsclient.PreferredAreaService/PreferredAreaAdd"
	PreferredAreaService_PreferredAreaDelete_FullMethodName = "/cmsclient.PreferredAreaService/PreferredAreaDelete"
	PreferredAreaService_PreferredAreaUpdate_FullMethodName = "/cmsclient.PreferredAreaService/PreferredAreaUpdate"
	PreferredAreaService_PreferredAreaList_FullMethodName   = "/cmsclient.PreferredAreaService/PreferredAreaList"
)

// PreferredAreaServiceClient is the client API for PreferredAreaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PreferredAreaServiceClient interface {
	// 商品优选
	PreferredAreaAdd(ctx context.Context, in *PreferredAreaAddReq, opts ...grpc.CallOption) (*PreferredAreaAddResp, error)
	PreferredAreaDelete(ctx context.Context, in *PreferredAreaDeleteReq, opts ...grpc.CallOption) (*PreferredAreaDeleteResp, error)
	PreferredAreaUpdate(ctx context.Context, in *PreferredAreaUpdateReq, opts ...grpc.CallOption) (*PreferredAreaUpdateResp, error)
	PreferredAreaList(ctx context.Context, in *PreferredAreaListReq, opts ...grpc.CallOption) (*PreferredAreaListResp, error)
}

type preferredAreaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPreferredAreaServiceClient(cc grpc.ClientConnInterface) PreferredAreaServiceClient {
	return &preferredAreaServiceClient{cc}
}

func (c *preferredAreaServiceClient) PreferredAreaAdd(ctx context.Context, in *PreferredAreaAddReq, opts ...grpc.CallOption) (*PreferredAreaAddResp, error) {
	out := new(PreferredAreaAddResp)
	err := c.cc.Invoke(ctx, PreferredAreaService_PreferredAreaAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *preferredAreaServiceClient) PreferredAreaDelete(ctx context.Context, in *PreferredAreaDeleteReq, opts ...grpc.CallOption) (*PreferredAreaDeleteResp, error) {
	out := new(PreferredAreaDeleteResp)
	err := c.cc.Invoke(ctx, PreferredAreaService_PreferredAreaDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *preferredAreaServiceClient) PreferredAreaUpdate(ctx context.Context, in *PreferredAreaUpdateReq, opts ...grpc.CallOption) (*PreferredAreaUpdateResp, error) {
	out := new(PreferredAreaUpdateResp)
	err := c.cc.Invoke(ctx, PreferredAreaService_PreferredAreaUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *preferredAreaServiceClient) PreferredAreaList(ctx context.Context, in *PreferredAreaListReq, opts ...grpc.CallOption) (*PreferredAreaListResp, error) {
	out := new(PreferredAreaListResp)
	err := c.cc.Invoke(ctx, PreferredAreaService_PreferredAreaList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PreferredAreaServiceServer is the server API for PreferredAreaService service.
// All implementations must embed UnimplementedPreferredAreaServiceServer
// for forward compatibility
type PreferredAreaServiceServer interface {
	// 商品优选
	PreferredAreaAdd(context.Context, *PreferredAreaAddReq) (*PreferredAreaAddResp, error)
	PreferredAreaDelete(context.Context, *PreferredAreaDeleteReq) (*PreferredAreaDeleteResp, error)
	PreferredAreaUpdate(context.Context, *PreferredAreaUpdateReq) (*PreferredAreaUpdateResp, error)
	PreferredAreaList(context.Context, *PreferredAreaListReq) (*PreferredAreaListResp, error)
	mustEmbedUnimplementedPreferredAreaServiceServer()
}

// UnimplementedPreferredAreaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPreferredAreaServiceServer struct {
}

func (UnimplementedPreferredAreaServiceServer) PreferredAreaAdd(context.Context, *PreferredAreaAddReq) (*PreferredAreaAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreferredAreaAdd not implemented")
}
func (UnimplementedPreferredAreaServiceServer) PreferredAreaDelete(context.Context, *PreferredAreaDeleteReq) (*PreferredAreaDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreferredAreaDelete not implemented")
}
func (UnimplementedPreferredAreaServiceServer) PreferredAreaUpdate(context.Context, *PreferredAreaUpdateReq) (*PreferredAreaUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreferredAreaUpdate not implemented")
}
func (UnimplementedPreferredAreaServiceServer) PreferredAreaList(context.Context, *PreferredAreaListReq) (*PreferredAreaListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreferredAreaList not implemented")
}
func (UnimplementedPreferredAreaServiceServer) mustEmbedUnimplementedPreferredAreaServiceServer() {}

// UnsafePreferredAreaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PreferredAreaServiceServer will
// result in compilation errors.
type UnsafePreferredAreaServiceServer interface {
	mustEmbedUnimplementedPreferredAreaServiceServer()
}

func RegisterPreferredAreaServiceServer(s grpc.ServiceRegistrar, srv PreferredAreaServiceServer) {
	s.RegisterService(&PreferredAreaService_ServiceDesc, srv)
}

func _PreferredAreaService_PreferredAreaAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreferredAreaAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreferredAreaServiceServer).PreferredAreaAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PreferredAreaService_PreferredAreaAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreferredAreaServiceServer).PreferredAreaAdd(ctx, req.(*PreferredAreaAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PreferredAreaService_PreferredAreaDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreferredAreaDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreferredAreaServiceServer).PreferredAreaDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PreferredAreaService_PreferredAreaDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreferredAreaServiceServer).PreferredAreaDelete(ctx, req.(*PreferredAreaDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PreferredAreaService_PreferredAreaUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreferredAreaUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreferredAreaServiceServer).PreferredAreaUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PreferredAreaService_PreferredAreaUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreferredAreaServiceServer).PreferredAreaUpdate(ctx, req.(*PreferredAreaUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PreferredAreaService_PreferredAreaList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreferredAreaListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreferredAreaServiceServer).PreferredAreaList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PreferredAreaService_PreferredAreaList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreferredAreaServiceServer).PreferredAreaList(ctx, req.(*PreferredAreaListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PreferredAreaService_ServiceDesc is the grpc.ServiceDesc for PreferredAreaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PreferredAreaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cmsclient.PreferredAreaService",
	HandlerType: (*PreferredAreaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PreferredAreaAdd",
			Handler:    _PreferredAreaService_PreferredAreaAdd_Handler,
		},
		{
			MethodName: "PreferredAreaDelete",
			Handler:    _PreferredAreaService_PreferredAreaDelete_Handler,
		},
		{
			MethodName: "PreferredAreaUpdate",
			Handler:    _PreferredAreaService_PreferredAreaUpdate_Handler,
		},
		{
			MethodName: "PreferredAreaList",
			Handler:    _PreferredAreaService_PreferredAreaList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/cms/cms.proto",
}

const (
	PreferredAreaProductRelationService_PreferredAreaProductRelationAdd_FullMethodName  = "/cmsclient.PreferredAreaProductRelationService/PreferredAreaProductRelationAdd"
	PreferredAreaProductRelationService_PreferredAreaProductRelationList_FullMethodName = "/cmsclient.PreferredAreaProductRelationService/PreferredAreaProductRelationList"
)

// PreferredAreaProductRelationServiceClient is the client API for PreferredAreaProductRelationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PreferredAreaProductRelationServiceClient interface {
	// 优选商品关联
	PreferredAreaProductRelationAdd(ctx context.Context, in *PreferredAreaProductRelationAddReq, opts ...grpc.CallOption) (*PreferredAreaProductRelationAddResp, error)
	PreferredAreaProductRelationList(ctx context.Context, in *PreferredAreaProductRelationListReq, opts ...grpc.CallOption) (*PreferredAreaProductRelationListResp, error)
}

type preferredAreaProductRelationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPreferredAreaProductRelationServiceClient(cc grpc.ClientConnInterface) PreferredAreaProductRelationServiceClient {
	return &preferredAreaProductRelationServiceClient{cc}
}

func (c *preferredAreaProductRelationServiceClient) PreferredAreaProductRelationAdd(ctx context.Context, in *PreferredAreaProductRelationAddReq, opts ...grpc.CallOption) (*PreferredAreaProductRelationAddResp, error) {
	out := new(PreferredAreaProductRelationAddResp)
	err := c.cc.Invoke(ctx, PreferredAreaProductRelationService_PreferredAreaProductRelationAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *preferredAreaProductRelationServiceClient) PreferredAreaProductRelationList(ctx context.Context, in *PreferredAreaProductRelationListReq, opts ...grpc.CallOption) (*PreferredAreaProductRelationListResp, error) {
	out := new(PreferredAreaProductRelationListResp)
	err := c.cc.Invoke(ctx, PreferredAreaProductRelationService_PreferredAreaProductRelationList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PreferredAreaProductRelationServiceServer is the server API for PreferredAreaProductRelationService service.
// All implementations must embed UnimplementedPreferredAreaProductRelationServiceServer
// for forward compatibility
type PreferredAreaProductRelationServiceServer interface {
	// 优选商品关联
	PreferredAreaProductRelationAdd(context.Context, *PreferredAreaProductRelationAddReq) (*PreferredAreaProductRelationAddResp, error)
	PreferredAreaProductRelationList(context.Context, *PreferredAreaProductRelationListReq) (*PreferredAreaProductRelationListResp, error)
	mustEmbedUnimplementedPreferredAreaProductRelationServiceServer()
}

// UnimplementedPreferredAreaProductRelationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPreferredAreaProductRelationServiceServer struct {
}

func (UnimplementedPreferredAreaProductRelationServiceServer) PreferredAreaProductRelationAdd(context.Context, *PreferredAreaProductRelationAddReq) (*PreferredAreaProductRelationAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreferredAreaProductRelationAdd not implemented")
}
func (UnimplementedPreferredAreaProductRelationServiceServer) PreferredAreaProductRelationList(context.Context, *PreferredAreaProductRelationListReq) (*PreferredAreaProductRelationListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreferredAreaProductRelationList not implemented")
}
func (UnimplementedPreferredAreaProductRelationServiceServer) mustEmbedUnimplementedPreferredAreaProductRelationServiceServer() {
}

// UnsafePreferredAreaProductRelationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PreferredAreaProductRelationServiceServer will
// result in compilation errors.
type UnsafePreferredAreaProductRelationServiceServer interface {
	mustEmbedUnimplementedPreferredAreaProductRelationServiceServer()
}

func RegisterPreferredAreaProductRelationServiceServer(s grpc.ServiceRegistrar, srv PreferredAreaProductRelationServiceServer) {
	s.RegisterService(&PreferredAreaProductRelationService_ServiceDesc, srv)
}

func _PreferredAreaProductRelationService_PreferredAreaProductRelationAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreferredAreaProductRelationAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreferredAreaProductRelationServiceServer).PreferredAreaProductRelationAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PreferredAreaProductRelationService_PreferredAreaProductRelationAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreferredAreaProductRelationServiceServer).PreferredAreaProductRelationAdd(ctx, req.(*PreferredAreaProductRelationAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PreferredAreaProductRelationService_PreferredAreaProductRelationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreferredAreaProductRelationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreferredAreaProductRelationServiceServer).PreferredAreaProductRelationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PreferredAreaProductRelationService_PreferredAreaProductRelationList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreferredAreaProductRelationServiceServer).PreferredAreaProductRelationList(ctx, req.(*PreferredAreaProductRelationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PreferredAreaProductRelationService_ServiceDesc is the grpc.ServiceDesc for PreferredAreaProductRelationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PreferredAreaProductRelationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cmsclient.PreferredAreaProductRelationService",
	HandlerType: (*PreferredAreaProductRelationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PreferredAreaProductRelationAdd",
			Handler:    _PreferredAreaProductRelationService_PreferredAreaProductRelationAdd_Handler,
		},
		{
			MethodName: "PreferredAreaProductRelationList",
			Handler:    _PreferredAreaProductRelationService_PreferredAreaProductRelationList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/cms/cms.proto",
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/cms/gen/model"
)

func newCmsPrefrenceArea(db *gorm.DB, opts ...gen.DOOption) cmsPrefrenceArea {
	_cmsPrefrenceArea := cmsPrefrenceArea{}

	_cmsPrefrenceArea.cmsPrefrenceAreaDo.UseDB(db, opts...)
	_cmsPrefrenceArea.cmsPrefrenceAreaDo.UseModel(&model.CmsPrefrenceArea{})

	tableName := _cmsPrefrenceArea.cmsPrefrenceAreaDo.TableName()
	_cmsPrefrenceArea.ALL = field.NewAsterisk(tableName)
	_cmsPrefrenceArea.ID = field.NewInt64(tableName, "id")
	_cmsPrefrenceArea.Name = field.NewString(tableName, "name")
	_cmsPrefrenceArea.SubTitle = field.NewString(tableName, "sub_title")
	_cmsPrefrenceArea.Pic = field.NewString(tableName, "pic")
	_cmsPrefrenceArea.Sort = field.NewInt32(tableName, "sort")
	_cmsPrefrenceArea.ShowStatus = field.NewInt32(tableName, "show_status")

	_cmsPrefrenceArea.fillFieldMap()

	return _cmsPrefrenceArea
}

// cmsPrefrenceArea 优选专区
type cmsPrefrenceArea struct {
	cmsPrefrenceAreaDo cmsPrefrenceAreaDo

	ALL        field.Asterisk
	ID         field.Int64
	Name       field.String
	SubTitle   field.String
	Pic        field.String // 展示图片
	Sort       field.Int32
	ShowStatus field.Int32

	fieldMap map[string]field.Expr
}

func (c cmsPrefrenceArea) Table(newTableName string) *cmsPrefrenceArea {
	c.cmsPrefrenceAreaDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cmsPrefrenceArea) As(alias string) *cmsPrefrenceArea {
	c.cmsPrefrenceAreaDo.DO = *(c.cmsPrefrenceAreaDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cmsPrefrenceArea) updateTableName(table string) *cmsPrefrenceArea {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.Name = field.NewString(table, "name")
	c.SubTitle = field.NewString(table, "sub_title")
	c.Pic = field.NewString(table, "pic")
	c.Sort = field.NewInt32(table, "sort")
	c.ShowStatus = field.NewInt32(table, "show_status")

	c.fillFieldMap()

	return c
}

func (c *cmsPrefrenceArea) WithContext(ctx context.Context) ICmsPrefrenceAreaDo {
	return c.cmsPrefrenceAreaDo.WithContext(ctx)
}

func (c cmsPrefrenceArea) TableName() string { return c.cmsPrefrenceAreaDo.TableName() }

func (c cmsPrefrenceArea) Alias() string { return c.cmsPrefrenceAreaDo.Alias() }

func (c cmsPrefrenceArea) Columns(cols ...field.Expr) gen.Columns {
	return c.cmsPrefrenceAreaDo.Columns(cols...)
}

func (c *cmsPrefrenceArea) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cmsPrefrenceArea) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["id"] = c.ID
	c.fieldMap["name"] = c.Name
	c.fieldMap["sub_title"] = c.SubTitle
	c.fieldMap["pic"] = c.Pic
	c.fieldMap["sort"] = c.Sort
	c.fieldMap["show_status"] = c.ShowStatus
}

func (c cmsPrefrenceArea) clone(db *gorm.DB) cmsPrefrenceArea {
	c.cmsPrefrenceAreaDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cmsPrefrenceArea) replaceDB(db *gorm.DB) cmsPrefrenceArea {
	c.cmsPrefrenceAreaDo.ReplaceDB(db)
	return c
}

type cmsPrefrenceAreaDo struct{ gen.DO }

type ICmsPrefrenceAreaDo interface {
	gen.SubQuery
	Debug() ICmsPrefrenceAreaDo
	WithContext(ctx context.Context) ICmsPrefrenceAreaDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICmsPrefrenceAreaDo
	WriteDB() ICmsPrefrenceAreaDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICmsPrefrenceAreaDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICmsPrefrenceAreaDo
	Not(conds ...gen.Condition) ICmsPrefrenceAreaDo
	Or(conds ...gen.Condition) ICmsPrefrenceAreaDo
	Select(conds ...field.Expr) ICmsPrefrenceAreaDo
	Where(conds ...gen.Condition) ICmsPrefrenceAreaDo
	Order(conds ...field.Expr) ICmsPrefrenceAreaDo
	Distinct(cols ...field.Expr) ICmsPrefrenceAreaDo
	Omit(cols ...field.Expr) ICmsPrefrenceAreaDo
	Join(table schema.Tabler, on ...field.Expr) ICmsPrefrenceAreaDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICmsPrefrenceAreaDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICmsPrefrenceAreaDo
	Group(cols ...field.Expr) ICmsPrefrenceAreaDo
	Having(conds ...gen.Condition) ICmsPrefrenceAreaDo
	Limit(limit int) ICmsPrefrenceAreaDo
	Offset(offset int) ICmsPrefrenceAreaDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICmsPrefrenceAreaDo
	Unscoped() ICmsPrefrenceAreaDo
	Create(values ...*model.CmsPrefrenceArea) error
	CreateInBatches(values []*model.CmsPrefrenceArea, batchSize int) error
	Save(values ...*model.CmsPrefrenceArea) error
	First() (*model.CmsPrefrenceArea, error)
	Take() (*model.CmsPrefrenceArea, error)
	Last() (*model.CmsPrefrenceArea, error)
	Find() ([]*model.CmsPrefrenceArea, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CmsPrefrenceArea, err error)
	FindInBatches(result *[]*model.CmsPrefrenceArea, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CmsPrefrenceArea) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICmsPrefrenceAreaDo
	Assign(attrs ...field.AssignExpr) ICmsPrefrenceAreaDo
	Joins(fields ...field.RelationField) ICmsPrefrenceAreaDo
	Preload(fields ...field.RelationField) ICmsPrefrenceAreaDo
	FirstOrInit() (*model.CmsPrefrenceArea, error)
	FirstOrCreate() (*model.CmsPrefrenceArea, error)
	FindByPage(offset int, limit int) (result []*model.CmsPrefrenceArea, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICmsPrefrenceAreaDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cmsPrefrenceAreaDo) Debug() ICmsPrefrenceAreaDo {
	return c.withDO(c.DO.Debug())
}

func (c cmsPrefrenceAreaDo) WithContext(ctx context.Context) ICmsPrefrenceAreaDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cmsPrefrenceAreaDo) ReadDB() ICmsPrefrenceAreaDo {
	return c.Clauses(dbresolver.Read)
}

func (c cmsPrefrenceAreaDo) WriteDB() ICmsPrefrenceAreaDo {
	return c.Clauses(dbresolver.Write)
}

func (c cmsPrefrenceAreaDo) Session(config *gorm.Session) ICmsPrefrenceAreaDo {
	return c.withDO(c.DO.Session(config))
}

func (c cmsPrefrenceAreaDo) Clauses(conds ...clause.Expression) ICmsPrefrenceAreaDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cmsPrefrenceAreaDo) Returning(value interface{}, columns ...string) ICmsPrefrenceAreaDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cmsPrefrenceAreaDo) Not(conds ...gen.Condition) ICmsPrefrenceAreaDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cmsPrefrenceAreaDo) Or(conds ...gen.Condition) ICmsPrefrenceAreaDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cmsPrefrenceAreaDo) Select(conds ...field.Expr) ICmsPrefrenceAreaDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cmsPrefrenceAreaDo) Where(conds ...gen.Condition) ICmsPrefrenceAreaDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cmsPrefrenceAreaDo) Order(conds ...field.Expr) ICmsPrefrenceAreaDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cmsPrefrenceAreaDo) Distinct(cols ...field.Expr) ICmsPrefrenceAreaDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cmsPrefrenceAreaDo) Omit(cols ...field.Expr) ICmsPrefrenceAreaDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cmsPrefrenceAreaDo) Join(table schema.Tabler, on ...field.Expr) ICmsPrefrenceAreaDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cmsPrefrenceAreaDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICmsPrefrenceAreaDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cmsPrefrenceAreaDo) RightJoin(table schema.Tabler, on ...field.Expr) ICmsPrefrenceAreaDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cmsPrefrenceAreaDo) Group(cols ...field.Expr) ICmsPrefrenceAreaDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cmsPrefrenceAreaDo) Having(conds ...gen.Condition) ICmsPrefrenceAreaDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cmsPrefrenceAreaDo) Limit(limit int) ICmsPrefrenceAreaDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cmsPrefrenceAreaDo) Offset(offset int) ICmsPrefrenceAreaDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cmsPrefrenceAreaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICmsPrefrenceAreaDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cmsPrefrenceAreaDo) Unscoped() ICmsPrefrenceAreaDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cmsPrefrenceAreaDo) Create(values ...*model.CmsPrefrenceArea) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cmsPrefrenceAreaDo) CreateInBatches(values []*model.CmsPrefrenceArea, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cmsPrefrenceAreaDo) Save(values ...*model.CmsPrefrenceArea) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cmsPrefrenceAreaDo) First() (*model.CmsPrefrenceArea, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsPrefrenceArea), nil
	}
}

func (c cmsPrefrenceAreaDo) Take() (*model.CmsPrefrenceArea, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsPrefrenceArea), nil
	}
}

func (c cmsPrefrenceAreaDo) Last() (*model.CmsPrefrenceArea, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsPrefrenceArea), nil
	}
}

func (c cmsPrefrenceAreaDo) Find() ([]*model.CmsPrefrenceArea, error) {
	result, err := c.DO.Find()
	return result.([]*model.CmsPrefrenceArea), err
}

func (c cmsPrefrenceAreaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CmsPrefrenceArea, err error) {
	buf := make([]*model.CmsPrefrenceArea, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cmsPrefrenceAreaDo) FindInBatches(result *[]*model.CmsPrefrenceArea, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cmsPrefrenceAreaDo) Attrs(attrs ...field.AssignExpr) ICmsPrefrenceAreaDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cmsPrefrenceAreaDo) Assign(attrs ...field.AssignExpr) ICmsPrefrenceAreaDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cmsPrefrenceAreaDo) Joins(fields ...field.RelationField) ICmsPrefrenceAreaDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cmsPrefrenceAreaDo) Preload(fields ...field.RelationField) ICmsPrefrenceAreaDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cmsPrefrenceAreaDo) FirstOrInit() (*model.CmsPrefrenceArea, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsPrefrenceArea), nil
	}
}

func (c cmsPrefrenceAreaDo) FirstOrCreate() (*model.CmsPrefrenceArea, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsPrefrenceArea), nil
	}
}

func (c cmsPrefrenceAreaDo) FindByPage(offset int, limit int) (result []*model.CmsPrefrenceArea, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cmsPrefrenceAreaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cmsPrefrenceAreaDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cmsPrefrenceAreaDo) Delete(models ...*model.CmsPrefrenceArea) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cmsPrefrenceAreaDo) withDO(do gen.Dao) *cmsPrefrenceAreaDo {
	c.DO = *do.(*gen.DO)
	return c
}

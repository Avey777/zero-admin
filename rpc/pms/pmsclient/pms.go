// Code generated by goctl. DO NOT EDIT!
// Source: pms.proto

//go:generate mockgen -destination ./pms_mock.go -package pmsclient -source $GOFILE

package pmsclient

import (
	"context"

	"go-zero-admin/rpc/pms/pms"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	ProductDeleteReq  = pms.ProductDeleteReq
	ProductDeleteResp = pms.ProductDeleteResp
	ProductAddReq     = pms.ProductAddReq
	ProductAddResp    = pms.ProductAddResp
	ProductListReq    = pms.ProductListReq
	ProductListResp   = pms.ProductListResp
	ProductUpdateReq  = pms.ProductUpdateReq
	ProductUpdateResp = pms.ProductUpdateResp

	Pms interface {
		ProductAdd(ctx context.Context, in *ProductAddReq) (*ProductAddResp, error)
		ProductList(ctx context.Context, in *ProductListReq) (*ProductListResp, error)
		ProductUpdate(ctx context.Context, in *ProductUpdateReq) (*ProductUpdateResp, error)
		ProductDelete(ctx context.Context, in *ProductDeleteReq) (*ProductDeleteResp, error)
	}

	defaultPms struct {
		cli zrpc.Client
	}
)

func NewPms(cli zrpc.Client) Pms {
	return &defaultPms{
		cli: cli,
	}
}

func (m *defaultPms) ProductAdd(ctx context.Context, in *ProductAddReq) (*ProductAddResp, error) {
	client := pms.NewPmsClient(m.cli.Conn())
	return client.ProductAdd(ctx, in)
}

func (m *defaultPms) ProductList(ctx context.Context, in *ProductListReq) (*ProductListResp, error) {
	client := pms.NewPmsClient(m.cli.Conn())
	return client.ProductList(ctx, in)
}

func (m *defaultPms) ProductUpdate(ctx context.Context, in *ProductUpdateReq) (*ProductUpdateResp, error) {
	client := pms.NewPmsClient(m.cli.Conn())
	return client.ProductUpdate(ctx, in)
}

func (m *defaultPms) ProductDelete(ctx context.Context, in *ProductDeleteReq) (*ProductDeleteResp, error) {
	client := pms.NewPmsClient(m.cli.Conn())
	return client.ProductDelete(ctx, in)
}

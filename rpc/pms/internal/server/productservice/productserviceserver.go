// Code generated by goctl. DO NOT EDIT.
// Source: pms.proto

package server

import (
	"context"

	"github.com/feihua/zero-admin/rpc/pms/internal/logic/productservice"
	"github.com/feihua/zero-admin/rpc/pms/internal/svc"
	"github.com/feihua/zero-admin/rpc/pms/pmsclient"
)

type ProductServiceServer struct {
	svcCtx *svc.ServiceContext
	pmsclient.UnimplementedProductServiceServer
}

func NewProductServiceServer(svcCtx *svc.ServiceContext) *ProductServiceServer {
	return &ProductServiceServer{
		svcCtx: svcCtx,
	}
}

func (s *ProductServiceServer) ProductAdd(ctx context.Context, in *pmsclient.ProductAddReq) (*pmsclient.ProductAddResp, error) {
	l := productservicelogic.NewProductAddLogic(ctx, s.svcCtx)
	return l.ProductAdd(in)
}

// 查询商品列表
func (s *ProductServiceServer) ProductList(ctx context.Context, in *pmsclient.ProductListReq) (*pmsclient.ProductListResp, error) {
	l := productservicelogic.NewProductListLogic(ctx, s.svcCtx)
	return l.ProductList(in)
}

func (s *ProductServiceServer) ProductListByIds(ctx context.Context, in *pmsclient.ProductByIdsReq) (*pmsclient.ProductListResp, error) {
	l := productservicelogic.NewProductListByIdsLogic(ctx, s.svcCtx)
	return l.ProductListByIds(in)
}

func (s *ProductServiceServer) ProductUpdate(ctx context.Context, in *pmsclient.ProductUpdateReq) (*pmsclient.ProductUpdateResp, error) {
	l := productservicelogic.NewProductUpdateLogic(ctx, s.svcCtx)
	return l.ProductUpdate(in)
}

func (s *ProductServiceServer) ProductDelete(ctx context.Context, in *pmsclient.ProductDeleteReq) (*pmsclient.ProductDeleteResp, error) {
	l := productservicelogic.NewProductDeleteLogic(ctx, s.svcCtx)
	return l.ProductDelete(in)
}

// 查询商品详情
func (s *ProductServiceServer) ProductDetailById(ctx context.Context, in *pmsclient.ProductDetailByIdReq) (*pmsclient.ProductDetailByIdResp, error) {
	l := productservicelogic.NewProductDetailByIdLogic(ctx, s.svcCtx)
	return l.ProductDetailById(in)
}

// 批量修改审核状态
func (s *ProductServiceServer) UpdateVerifyStatus(ctx context.Context, in *pmsclient.UpdateProductStatusReq) (*pmsclient.UpdateProductStatusResp, error) {
	l := productservicelogic.NewUpdateVerifyStatusLogic(ctx, s.svcCtx)
	return l.UpdateVerifyStatus(in)
}

// 批量上下架商品
func (s *ProductServiceServer) UpdatePublishStatus(ctx context.Context, in *pmsclient.UpdateProductStatusReq) (*pmsclient.UpdateProductStatusResp, error) {
	l := productservicelogic.NewUpdatePublishStatusLogic(ctx, s.svcCtx)
	return l.UpdatePublishStatus(in)
}

// 批量推荐商品
func (s *ProductServiceServer) UpdateRecommendStatus(ctx context.Context, in *pmsclient.UpdateProductStatusReq) (*pmsclient.UpdateProductStatusResp, error) {
	l := productservicelogic.NewUpdateRecommendStatusLogic(ctx, s.svcCtx)
	return l.UpdateRecommendStatus(in)
}

// 批量设为新品
func (s *ProductServiceServer) UpdateNewStatus(ctx context.Context, in *pmsclient.UpdateProductStatusReq) (*pmsclient.UpdateProductStatusResp, error) {
	l := productservicelogic.NewUpdateNewStatusLogic(ctx, s.svcCtx)
	return l.UpdateNewStatus(in)
}

// 批量修改删除状态
func (s *ProductServiceServer) UpdateDeleteStatus(ctx context.Context, in *pmsclient.UpdateProductStatusReq) (*pmsclient.UpdateProductStatusResp, error) {
	l := productservicelogic.NewUpdateDeleteStatusLogic(ctx, s.svcCtx)
	return l.UpdateDeleteStatus(in)
}

// Code generated by goctl. DO NOT EDIT!

package sysmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysDeptFieldNames          = builder.RawFieldNames(&SysDept{})
	sysDeptRows                = strings.Join(sysDeptFieldNames, ",")
	sysDeptRowsExpectAutoSet   = strings.Join(stringx.Remove(sysDeptFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	sysDeptRowsWithPlaceHolder = strings.Join(stringx.Remove(sysDeptFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	sysDeptModel interface {
		Insert(ctx context.Context, data *SysDept) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysDept, error)
		Update(ctx context.Context, data *SysDept) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSysDeptModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SysDept struct {
		Id             int64          `db:"id"`               // 编号
		Name           sql.NullString `db:"name"`             // 机构名称
		ParentId       sql.NullInt64  `db:"parent_id"`        // 上级机构ID，一级机构为0
		OrderNum       sql.NullInt64  `db:"order_num"`        // 排序
		CreateBy       sql.NullString `db:"create_by"`        // 创建人
		CreateTime     time.Time      `db:"create_time"`      // 创建时间
		LastUpdateBy   sql.NullString `db:"last_update_by"`   // 更新人
		LastUpdateTime sql.NullTime   `db:"last_update_time"` // 更新时间
		DelFlag        int64          `db:"del_flag"`         // 是否删除  -1：已删除  0：正常
	}
)

func newSysDeptModel(conn sqlx.SqlConn) *defaultSysDeptModel {
	return &defaultSysDeptModel{
		conn:  conn,
		table: "`sys_dept`",
	}
}

func (m *defaultSysDeptModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSysDeptModel) FindOne(ctx context.Context, id int64) (*SysDept, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysDeptRows, m.table)
	var resp SysDept
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysDeptModel) Insert(ctx context.Context, data *SysDept) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, sysDeptRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.ParentId, data.OrderNum, data.CreateBy, data.LastUpdateBy, data.LastUpdateTime, data.DelFlag)
	return ret, err
}

func (m *defaultSysDeptModel) Update(ctx context.Context, data *SysDept) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysDeptRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.ParentId, data.OrderNum, data.CreateBy, data.LastUpdateBy, data.LastUpdateTime, data.DelFlag, data.Id)
	return err
}

func (m *defaultSysDeptModel) tableName() string {
	return m.table
}

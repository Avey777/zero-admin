// Code generated by goctl. DO NOT EDIT!

package sysmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysMenuFieldNames          = builder.RawFieldNames(&SysMenu{})
	sysMenuRows                = strings.Join(sysMenuFieldNames, ",")
	sysMenuRowsExpectAutoSet   = strings.Join(stringx.Remove(sysMenuFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	sysMenuRowsWithPlaceHolder = strings.Join(stringx.Remove(sysMenuFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	sysMenuModel interface {
		Insert(ctx context.Context, data *SysMenu) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysMenu, error)
		Update(ctx context.Context, data *SysMenu) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSysMenuModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SysMenu struct {
		Id             int64          `db:"id"`        // 编号
		Name           sql.NullString `db:"name"`      // 菜单名称
		ParentId       sql.NullInt64  `db:"parent_id"` // 父菜单ID，一级菜单为0
		Url            sql.NullString `db:"url"`
		Perms          sql.NullString `db:"perms"`            // 授权(多个用逗号分隔，如：sys:user:add,sys:user:edit)
		Type           sql.NullInt64  `db:"type"`             // 类型   0：目录   1：菜单   2：按钮
		Icon           sql.NullString `db:"icon"`             // 菜单图标
		OrderNum       sql.NullInt64  `db:"order_num"`        // 排序
		CreateBy       sql.NullString `db:"create_by"`        // 创建人
		CreateTime     time.Time      `db:"create_time"`      // 创建时间
		LastUpdateBy   sql.NullString `db:"last_update_by"`   // 更新人
		LastUpdateTime sql.NullTime   `db:"last_update_time"` // 更新时间
		DelFlag        int64          `db:"del_flag"`         // 是否删除  -1：已删除  0：正常
		VuePath        sql.NullString `db:"vue_path"`         // vue系统的path
		VueComponent   sql.NullString `db:"vue_component"`    // vue的页面
		VueIcon        sql.NullString `db:"vue_icon"`         // vue的图标
		VueRedirect    sql.NullString `db:"vue_redirect"`     // vue的路由重定向
		BackgroundUrl  string         `db:"background_url"`   // 后台地址
	}
)

func newSysMenuModel(conn sqlx.SqlConn) *defaultSysMenuModel {
	return &defaultSysMenuModel{
		conn:  conn,
		table: "`sys_menu`",
	}
}

func (m *defaultSysMenuModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSysMenuModel) FindOne(ctx context.Context, id int64) (*SysMenu, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysMenuRows, m.table)
	var resp SysMenu
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysMenuModel) Insert(ctx context.Context, data *SysMenu) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, sysMenuRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.ParentId, data.Url, data.Perms, data.Type, data.Icon, data.OrderNum, data.CreateBy, data.LastUpdateBy, data.LastUpdateTime, data.DelFlag, data.VuePath, data.VueComponent, data.VueIcon, data.VueRedirect, data.BackgroundUrl)
	return ret, err
}

func (m *defaultSysMenuModel) Update(ctx context.Context, data *SysMenu) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysMenuRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.ParentId, data.Url, data.Perms, data.Type, data.Icon, data.OrderNum, data.CreateBy, data.LastUpdateBy, data.LastUpdateTime, data.DelFlag, data.VuePath, data.VueComponent, data.VueIcon, data.VueRedirect, data.BackgroundUrl, data.Id)
	return err
}

func (m *defaultSysMenuModel) tableName() string {
	return m.table
}

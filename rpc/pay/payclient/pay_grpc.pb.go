// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pay.proto

package payclient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderPayServiceClient is the client API for OrderPayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderPayServiceClient interface {
	//预下单,返回信息给app唤起客户端进行支付
	OrderPay(ctx context.Context, in *OrderPayReq, opts ...grpc.CallOption) (*OrderPayResp, error)
	//订单状态查询
	OrderPayQuery(ctx context.Context, in *OrderPayQueryReq, opts ...grpc.CallOption) (*OrderPayQueryResp, error)
}

type orderPayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderPayServiceClient(cc grpc.ClientConnInterface) OrderPayServiceClient {
	return &orderPayServiceClient{cc}
}

func (c *orderPayServiceClient) OrderPay(ctx context.Context, in *OrderPayReq, opts ...grpc.CallOption) (*OrderPayResp, error) {
	out := new(OrderPayResp)
	err := c.cc.Invoke(ctx, "/payclient.OrderPayService/OrderPay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderPayServiceClient) OrderPayQuery(ctx context.Context, in *OrderPayQueryReq, opts ...grpc.CallOption) (*OrderPayQueryResp, error) {
	out := new(OrderPayQueryResp)
	err := c.cc.Invoke(ctx, "/payclient.OrderPayService/OrderPayQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderPayServiceServer is the server API for OrderPayService service.
// All implementations must embed UnimplementedOrderPayServiceServer
// for forward compatibility
type OrderPayServiceServer interface {
	//预下单,返回信息给app唤起客户端进行支付
	OrderPay(context.Context, *OrderPayReq) (*OrderPayResp, error)
	//订单状态查询
	OrderPayQuery(context.Context, *OrderPayQueryReq) (*OrderPayQueryResp, error)
	mustEmbedUnimplementedOrderPayServiceServer()
}

// UnimplementedOrderPayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderPayServiceServer struct {
}

func (UnimplementedOrderPayServiceServer) OrderPay(context.Context, *OrderPayReq) (*OrderPayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderPay not implemented")
}
func (UnimplementedOrderPayServiceServer) OrderPayQuery(context.Context, *OrderPayQueryReq) (*OrderPayQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderPayQuery not implemented")
}
func (UnimplementedOrderPayServiceServer) mustEmbedUnimplementedOrderPayServiceServer() {}

// UnsafeOrderPayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderPayServiceServer will
// result in compilation errors.
type UnsafeOrderPayServiceServer interface {
	mustEmbedUnimplementedOrderPayServiceServer()
}

func RegisterOrderPayServiceServer(s grpc.ServiceRegistrar, srv OrderPayServiceServer) {
	s.RegisterService(&OrderPayService_ServiceDesc, srv)
}

func _OrderPayService_OrderPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderPayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderPayServiceServer).OrderPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payclient.OrderPayService/OrderPay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderPayServiceServer).OrderPay(ctx, req.(*OrderPayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderPayService_OrderPayQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderPayQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderPayServiceServer).OrderPayQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payclient.OrderPayService/OrderPayQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderPayServiceServer).OrderPayQuery(ctx, req.(*OrderPayQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderPayService_ServiceDesc is the grpc.ServiceDesc for OrderPayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderPayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payclient.OrderPayService",
	HandlerType: (*OrderPayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OrderPay",
			Handler:    _OrderPayService_OrderPay_Handler,
		},
		{
			MethodName: "OrderPayQuery",
			Handler:    _OrderPayService_OrderPayQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pay.proto",
}

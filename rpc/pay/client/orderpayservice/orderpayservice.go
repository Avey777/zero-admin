// Code generated by goctl. DO NOT EDIT.
// Source: pay.proto

package orderpayservice

import (
	"context"

	"zero-admin/rpc/pay/payclient"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	OrderPayQueryReq  = payclient.OrderPayQueryReq
	OrderPayQueryResp = payclient.OrderPayQueryResp
	OrderPayReq       = payclient.OrderPayReq
	OrderPayResp      = payclient.OrderPayResp

	OrderPayService interface {
		// 预下单,返回信息给app唤起客户端进行支付
		OrderPay(ctx context.Context, in *OrderPayReq, opts ...grpc.CallOption) (*OrderPayResp, error)
		// 订单状态查询
		OrderPayQuery(ctx context.Context, in *OrderPayQueryReq, opts ...grpc.CallOption) (*OrderPayQueryResp, error)
	}

	defaultOrderPayService struct {
		cli zrpc.Client
	}
)

func NewOrderPayService(cli zrpc.Client) OrderPayService {
	return &defaultOrderPayService{
		cli: cli,
	}
}

// 预下单,返回信息给app唤起客户端进行支付
func (m *defaultOrderPayService) OrderPay(ctx context.Context, in *OrderPayReq, opts ...grpc.CallOption) (*OrderPayResp, error) {
	client := payclient.NewOrderPayServiceClient(m.cli.Conn())
	return client.OrderPay(ctx, in, opts...)
}

// 订单状态查询
func (m *defaultOrderPayService) OrderPayQuery(ctx context.Context, in *OrderPayQueryReq, opts ...grpc.CallOption) (*OrderPayQueryResp, error) {
	client := payclient.NewOrderPayServiceClient(m.cli.Conn())
	return client.OrderPayQuery(ctx, in, opts...)
}

// Code generated by goctl. DO NOT EDIT!
// Source: oms.proto

//go:generate mockgen -destination ./oms_mock.go -package omsclient -source $GOFILE

package omsclient

import (
	"context"

	"go-zero-admin/rpc/oms/oms"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	OrderUpdateResp = oms.OrderUpdateResp
	OrderDeleteReq  = oms.OrderDeleteReq
	OrderDeleteResp = oms.OrderDeleteResp
	OrderAddReq     = oms.OrderAddReq
	OrderAddResp    = oms.OrderAddResp
	OrderListReq    = oms.OrderListReq
	OrderListResp   = oms.OrderListResp
	OrderUpdateReq  = oms.OrderUpdateReq

	Oms interface {
		OrderAdd(ctx context.Context, in *OrderAddReq) (*OrderAddResp, error)
		OrderList(ctx context.Context, in *OrderListReq) (*OrderListResp, error)
		OrderUpdate(ctx context.Context, in *OrderUpdateReq) (*OrderUpdateResp, error)
		OrderDelete(ctx context.Context, in *OrderDeleteReq) (*OrderDeleteResp, error)
	}

	defaultOms struct {
		cli zrpc.Client
	}
)

func NewOms(cli zrpc.Client) Oms {
	return &defaultOms{
		cli: cli,
	}
}

func (m *defaultOms) OrderAdd(ctx context.Context, in *OrderAddReq) (*OrderAddResp, error) {
	client := oms.NewOmsClient(m.cli.Conn())
	return client.OrderAdd(ctx, in)
}

func (m *defaultOms) OrderList(ctx context.Context, in *OrderListReq) (*OrderListResp, error) {
	client := oms.NewOmsClient(m.cli.Conn())
	return client.OrderList(ctx, in)
}

func (m *defaultOms) OrderUpdate(ctx context.Context, in *OrderUpdateReq) (*OrderUpdateResp, error) {
	client := oms.NewOmsClient(m.cli.Conn())
	return client.OrderUpdate(ctx, in)
}

func (m *defaultOms) OrderDelete(ctx context.Context, in *OrderDeleteReq) (*OrderDeleteResp, error) {
	client := oms.NewOmsClient(m.cli.Conn())
	return client.OrderDelete(ctx, in)
}

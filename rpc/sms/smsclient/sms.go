// Code generated by goctl. DO NOT EDIT!
// Source: sms.proto

//go:generate mockgen -destination ./sms_mock.go -package smsclient -source $GOFILE

package smsclient

import (
	"context"

	"go-zero-admin/rpc/sms/sms"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	CouponDeleteReq  = sms.CouponDeleteReq
	CouponDeleteResp = sms.CouponDeleteResp
	CouponAddReq     = sms.CouponAddReq
	CouponAddResp    = sms.CouponAddResp
	CouponListReq    = sms.CouponListReq
	CouponListResp   = sms.CouponListResp
	CouponUpdateReq  = sms.CouponUpdateReq
	CouponUpdateResp = sms.CouponUpdateResp

	Sms interface {
		CouponAdd(ctx context.Context, in *CouponAddReq) (*CouponAddResp, error)
		CouponList(ctx context.Context, in *CouponListReq) (*CouponListResp, error)
		CouponUpdate(ctx context.Context, in *CouponUpdateReq) (*CouponUpdateResp, error)
		CouponDelete(ctx context.Context, in *CouponDeleteReq) (*CouponDeleteResp, error)
	}

	defaultSms struct {
		cli zrpc.Client
	}
)

func NewSms(cli zrpc.Client) Sms {
	return &defaultSms{
		cli: cli,
	}
}

func (m *defaultSms) CouponAdd(ctx context.Context, in *CouponAddReq) (*CouponAddResp, error) {
	client := sms.NewSmsClient(m.cli.Conn())
	return client.CouponAdd(ctx, in)
}

func (m *defaultSms) CouponList(ctx context.Context, in *CouponListReq) (*CouponListResp, error) {
	client := sms.NewSmsClient(m.cli.Conn())
	return client.CouponList(ctx, in)
}

func (m *defaultSms) CouponUpdate(ctx context.Context, in *CouponUpdateReq) (*CouponUpdateResp, error) {
	client := sms.NewSmsClient(m.cli.Conn())
	return client.CouponUpdate(ctx, in)
}

func (m *defaultSms) CouponDelete(ctx context.Context, in *CouponDeleteReq) (*CouponDeleteResp, error) {
	client := sms.NewSmsClient(m.cli.Conn())
	return client.CouponDelete(ctx, in)
}

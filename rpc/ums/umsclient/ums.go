// Code generated by goctl. DO NOT EDIT!
// Source: ums.proto

//go:generate mockgen -destination ./ums_mock.go -package umsclient -source $GOFILE

package umsclient

import (
	"context"

	"go-zero-admin/rpc/ums/ums"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	MemberUpdateReq  = ums.MemberUpdateReq
	MemberUpdateResp = ums.MemberUpdateResp
	MemberDeleteReq  = ums.MemberDeleteReq
	MemberDeleteResp = ums.MemberDeleteResp
	MemberAddReq     = ums.MemberAddReq
	MemberAddResp    = ums.MemberAddResp
	MemberListReq    = ums.MemberListReq
	MemberListResp   = ums.MemberListResp

	Ums interface {
		MemberAdd(ctx context.Context, in *MemberAddReq) (*MemberAddResp, error)
		MemberList(ctx context.Context, in *MemberListReq) (*MemberListResp, error)
		MemberUpdate(ctx context.Context, in *MemberUpdateReq) (*MemberUpdateResp, error)
		MemberDelete(ctx context.Context, in *MemberDeleteReq) (*MemberDeleteResp, error)
	}

	defaultUms struct {
		cli zrpc.Client
	}
)

func NewUms(cli zrpc.Client) Ums {
	return &defaultUms{
		cli: cli,
	}
}

func (m *defaultUms) MemberAdd(ctx context.Context, in *MemberAddReq) (*MemberAddResp, error) {
	client := ums.NewUmsClient(m.cli.Conn())
	return client.MemberAdd(ctx, in)
}

func (m *defaultUms) MemberList(ctx context.Context, in *MemberListReq) (*MemberListResp, error) {
	client := ums.NewUmsClient(m.cli.Conn())
	return client.MemberList(ctx, in)
}

func (m *defaultUms) MemberUpdate(ctx context.Context, in *MemberUpdateReq) (*MemberUpdateResp, error) {
	client := ums.NewUmsClient(m.cli.Conn())
	return client.MemberUpdate(ctx, in)
}

func (m *defaultUms) MemberDelete(ctx context.Context, in *MemberDeleteReq) (*MemberDeleteResp, error) {
	client := ums.NewUmsClient(m.cli.Conn())
	return client.MemberDelete(ctx, in)
}
